{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-20T12:12:25.337Z",
    "end": "2025-06-20T12:12:26.962Z",
    "duration": 1625,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "42e4fc4f-feb0-4d7c-8d81-a74e854133a9",
      "title": "",
      "fullFile": "cypress\\e2e\\api_demoblaze.cy.js",
      "file": "cypress\\e2e\\api_demoblaze.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3ca9058b-7ece-45f0-9760-d0b484f3de3f",
          "title": "Pruebas de API - Demoblaze",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Crear un nuevo usuario (signup)",
              "fullTitle": "Pruebas de API - Demoblaze Crear un nuevo usuario (signup)",
              "timedOut": null,
              "duration": 574,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('POST', signupUrl, {\n  username: user.username,\n  password: user.password\n}).then(response => {\n  expect(response.status).to.eq(200); // Verifica que la respuesta sea 200 OK\n  // Mostrar en consola qué contiene la respuesta\n  cy.log(JSON.stringify(response.body));\n  // Verifica si trae \"message\" o \"errorMessage\"\n  if (response.body.message) {\n    expect(response.body).to.have.property('message', 'Sign up successful.');\n  } else {\n    expect(response.body).to.have.property('errorMessage', 'This user already exist.');\n  }\n});",
              "err": {},
              "uuid": "8c876598-c9d8-45f9-a52a-004e7013ee72",
              "parentUUID": "3ca9058b-7ece-45f0-9760-d0b484f3de3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Intentar crear un usuario ya existente (signup)",
              "fullTitle": "Pruebas de API - Demoblaze Intentar crear un usuario ya existente (signup)",
              "timedOut": null,
              "duration": 240,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: signupUrl,\n  body: {\n    username: user.username,\n    password: user.password\n  },\n  // Evitamos que Cypress falle automáticamente por un error HTTP\n  failOnStatusCode: false //Evita que Cypress falle automáticamente por un error HTTP\n}).then(response => {\n  // El servidor sigue respondiendo 200, aunque con error lógico\n  expect(response.status).to.eq(200);\n  // Verificamos que devuelve el mensaje de usuario ya existente\n  expect(response.body).to.have.property('errorMessage', 'This user already exist.');\n  expect(response.duration).to.be.lessThan(1500); // Valida tiempo de respuesta\n});",
              "err": {},
              "uuid": "00be2cbe-e4e4-46ba-b8af-63f42e902925",
              "parentUUID": "3ca9058b-7ece-45f0-9760-d0b484f3de3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login con usuario y password correctos",
              "fullTitle": "Pruebas de API - Demoblaze Login con usuario y password correctos",
              "timedOut": null,
              "duration": 334,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('POST', loginUrl, {\n  username: user.username,\n  password: user.password\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // La API devuelve un string tipo \"Auth_token: xxxxx\"\n  expect(response.body).to.contain('Auth_token:'); // Confirmamos que el token está presente\n  // Extraer el token del string de respuesta\n  const token = response.body.split('Auth_token: ')[1];\n  expect(token).to.not.be.empty; // Verificamos que el token no esté vacío\n  cy.log('Token extraído: ' + token); // Mostramos el token en la consola\n  expect(response.duration).to.be.lessThan(1000); // Tiempo de respuesta < 1s\n});",
              "err": {},
              "uuid": "bd1350e6-4da0-422b-91a0-b84f83693e53",
              "parentUUID": "3ca9058b-7ece-45f0-9760-d0b484f3de3f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login con usuario y/o password incorrecto",
              "fullTitle": "Pruebas de API - Demoblaze Login con usuario y/o password incorrecto",
              "timedOut": null,
              "duration": 265,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: loginUrl,\n  body: {\n    username: user.username,\n    password: 'wrongpass' // Contraseña incorrecta\n  },\n  failOnStatusCode: false\n}).then(response => {\n  // El servidor responde 200, pero con mensaje de error\n  expect(response.status).to.eq(200);\n  // Verificamos que indica \"Wrong password.\"\n  expect(response.body).to.have.property('errorMessage', 'Wrong password.');\n  expect(response.duration).to.be.lessThan(1000); // Performance\n});",
              "err": {},
              "uuid": "09bfdf30-5b4b-4014-b73a-0a68e69b90c8",
              "parentUUID": "3ca9058b-7ece-45f0-9760-d0b484f3de3f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c876598-c9d8-45f9-a52a-004e7013ee72",
            "00be2cbe-e4e4-46ba-b8af-63f42e902925",
            "bd1350e6-4da0-422b-91a0-b84f83693e53",
            "09bfdf30-5b4b-4014-b73a-0a68e69b90c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1413,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.2.0"
    }
  }
}